
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      // Check if the user document exists and the role is 'admin'
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the requesting user is a teacher
    function isTeacher() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Helper function to check if the requesting user is a student
    function isStudent() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Helper function to check if the requesting user is a parent
    function isParent() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // == users collection ==
    // Stores user roles and basic info. UID is the document ID.
    match /users/{userId} {
      allow get: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow list: if isAuthenticated() && isAdmin(); // Only admins can list all users.

      // Allow authenticated user to create their OWN user document.
      // This happens during initial role assignment by admin OR if user somehow needs to set their role.
      // Role must be valid, and email must match token email if provided.
      allow create: if isAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.role in ['admin', 'teacher', 'student', 'parent'] &&
                       (request.resource.data.email == request.auth.token.email || request.resource.data.email == null);

      // User can update their own document, but cannot change their role.
      // Admin can update any field, including role.
      allow update: if isAuthenticated() &&
                       (
                         (request.auth.uid == userId && request.resource.data.role == resource.data.role) || // User updates own, role unchanged
                         isAdmin() // Admin can update anything
                       );
      allow delete: if isAuthenticated() && isAdmin(); // Only admins can delete user documents.
    }

    // == students collection ==
    // Stores student profiles. UID is the document ID.
    match /students/{studentId} {
      allow get: if isAuthenticated() && (isAdmin() || isTeacher() || (isStudent() && request.auth.uid == studentId) || isParent()); // Parent rule needs refinement for specific child
      allow list: if isAuthenticated() && (isAdmin() || isTeacher()); // Admins and teachers can list students
      allow create, update, delete: if isAuthenticated() && isAdmin(); // Only admins can modify student profiles
    }

    // == teachers collection ==
    // Stores teacher profiles. UID is the document ID.
    match /teachers/{teacherId} {
      allow get: if isAuthenticated() && (isAdmin() || (isTeacher() && request.auth.uid == teacherId) || isStudent() || isParent()); // Allow broad read for now
      allow list: if isAuthenticated() && (isAdmin() || isTeacher()); // Admins and teachers can list teachers
      allow create, update, delete: if isAuthenticated() && isAdmin(); // Only admins can modify teacher profiles
    }

    // == classes collection ==
    match /classes/{classId} {
      allow get, list: if isAuthenticated(); // All authenticated users can read class info
      allow create, update, delete: if isAuthenticated() && isAdmin(); // Only admins can manage classes
    }

    // == subjects collection ==
    match /subjects/{subjectId} {
      allow get, list: if isAuthenticated(); // All authenticated users can read subject info
      allow create, update, delete: if isAuthenticated() && isAdmin(); // Only admins can manage subjects
    }

    // == attendanceRecords collection ==
    match /attendanceRecords/{recordId} {
      allow get: if isAuthenticated() &&
                    (
                      isAdmin() ||
                      isTeacher() || // Teachers can read any, ideally scoped to their students
                      (isStudent() && resource.data.studentId == request.auth.uid) ||
                      (isParent()) // Parent rule needs refinement for specific child
                    );
      allow list: if isAuthenticated() && (isAdmin() || isTeacher() || isParent()); // Students list their own via query, parents list their child's via query
      allow create, update: if isAuthenticated() && (isAdmin() || isTeacher()); // Admins and Teachers can mark/update attendance
      allow delete: if isAuthenticated() && isAdmin();
    }

    // == gradeRecords collection ==
    match /gradeRecords/{recordId} {
      allow get: if isAuthenticated() &&
                    (
                      isAdmin() ||
                      isTeacher() || // Teachers can read any, ideally scoped to their students
                      (isStudent() && resource.data.studentId == request.auth.uid) ||
                      (isParent()) // Parent rule needs refinement for specific child
                    );
      allow list: if isAuthenticated() && (isAdmin() || isTeacher() || isParent()); // Students list their own via query, parents list their child's via query
      allow create, update: if isAuthenticated() && (isAdmin() || isTeacher()); // Admins and Teachers can manage grades
      allow delete: if isAuthenticated() && isAdmin();
    }

    // == feeRecords collection ==
    match /feeRecords/{recordId} {
        allow get, list: if isAuthenticated() && (isAdmin() || isParent()); // Admin and Parents (needs refinement for specific child)
        allow create, update, delete: if isAuthenticated() && isAdmin(); // Only admins manage fees
    }

    // == notifications collection ==
    match /notifications/{notificationId} {
      allow read: if isAuthenticated(); // All authenticated users can read notifications
      allow create, update, delete: if isAuthenticated() && isAdmin(); // Only admins can manage notifications
    }

    // Default deny all other paths not explicitly matched above.
    // This is good practice, but ensure all necessary paths ARE matched above.
    // If you find legitimate operations failing, review if a path is missing an allow rule.
    // match /{document=**} {
    //  allow read, write: if false;
    // }
    // Note: An explicit global deny like above isn't always necessary if all specific paths
    // are correctly defined, as rules are implicitly "deny" unless an "allow" matches.
    // For now, we'll rely on specific allows.
  }
}

    