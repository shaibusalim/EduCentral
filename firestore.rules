
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Function to check if the user has an 'admin' role
    // This requires a read to the user's own document in the 'users' collection.
    // Ensure the rules for /users/{userId} allow this read for the user themselves.
    function isAdmin() {
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Function to check if the user has a 'teacher' role
    function isTeacher() {
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Function to check if the user has a 'student' role
    function isStudent() {
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Function to check if the user has a 'parent' role
    function isParent() {
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }

    // Rules for the 'users' collection (stores user roles and basic info)
    match /users/{userId} {
      // Allow a user to read their own document.
      // Allow an admin to read any user document.
      allow get: if isUserAuthenticated() && (isOwner(userId) || isAdmin());

      // Admins create user documents during onboarding.
      allow create: if isAdmin() &&
                       request.resource.data.role in ['student', 'teacher', 'parent', 'admin'] &&
                       'email' in request.resource.data &&
                       request.resource.data.email != null; // Ensure email is provided

      // Users can update their own document (e.g., display name, photoURL) but NOT their role.
      // Admins can update any field, including the role.
      allow update: if isUserAuthenticated() &&
                       (
                         (isOwner(userId) && !('role' in request.resource.data)) || // Owner updating non-role fields
                         (isOwner(userId) && request.resource.data.role == resource.data.role) || // Owner "updating" role to the same value (effectively no change)
                         isAdmin() // Admin can update anything
                       );

      // Only admins can delete user documents.
      allow delete: if isAdmin();

      // Listing users: only admins should be able to list all users.
      allow list: if isAdmin();
    }

    // Rules for 'students' collection (student profiles)
    match /students/{studentId} {
      allow read: if isUserAuthenticated() && (isAdmin() || isTeacher() || (isOwner(studentId) && isStudent()) || isParent()); // Parent rule needs refinement for specific child
      allow create, update, delete: if isAdmin();
      // Students might update parts of their own profile in the future
      // allow update: if isAdmin() || (isOwner(studentId) && isStudent() && incomingDataOnlyAllowsCertainFields());
    }

    // Rules for 'teachers' collection (teacher profiles)
    match /teachers/{teacherId} {
      allow read: if isUserAuthenticated() && (isAdmin() || isTeacher()); // Teachers can see other teacher profiles for collaboration if needed, or restrict to own.
      // allow read: if isAdmin() || (isOwner(teacherId) && isTeacher()); // More restrictive: only own or admin
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'classes' collection
    match /classes/{classId} {
      allow read: if isUserAuthenticated(); // All authenticated users can see class lists
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'subjects' collection
    match /subjects/{subjectId} {
      allow read: if isUserAuthenticated(); // All authenticated users can see subject lists
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
      allow read: if isUserAuthenticated(); // All authenticated users can read notifications
      allow create: if isAdmin(); // Only admins can create notifications
      allow update, delete: if isAdmin(); // Or perhaps make them immutable by not allowing update/delete
    }

    // Rules for 'attendanceRecords' collection
    match /attendanceRecords/{recordId} {
      allow read: if isUserAuthenticated() && (
                    isAdmin() ||
                    isTeacher() || // Teachers need to read attendance for their classes
                    (isStudent() && resource.data.studentId == request.auth.uid) || // Student reads own attendance
                    isParent() // Parent access needs to be tied to their specific child(ren)
                  );
      allow create, update: if isUserAuthenticated() && (isAdmin() || isTeacher()); // Teachers and admins can mark/update attendance
      allow delete: if isAdmin();
    }

    // Rules for 'gradeRecords' collection
    match /gradeRecords/{recordId} {
      allow read: if isUserAuthenticated() && (
                    isAdmin() ||
                    isTeacher() || // Teachers need to read grades for their students
                    (isStudent() && resource.data.studentId == request.auth.uid) || // Student reads own grades
                    isParent() // Parent access needs to be tied to their specific child(ren)
                  );
      allow create, update: if isUserAuthenticated() && (isAdmin() || isTeacher()); // Teachers and admins can enter/update grades
      allow delete: if isAdmin();
    }

     // Rules for 'feeRecords' collection
    match /feeRecords/{feeId} {
      allow read: if isUserAuthenticated() && (
                    isAdmin() ||
                    (isParent() && resource.data.studentId == "student123") // TODO: Replace "student123" with actual child ID check
                  );
      // Generally, only admins should create/update/delete fee records
      allow create, update, delete: if isAdmin();
    }
  }
}
