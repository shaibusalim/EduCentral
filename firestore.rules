
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an Admin
    function isAdmin() {
      // Ensure the user document exists before trying to access .data.role
      return request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is a Teacher
    function isTeacher() {
      return request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Helper function to check if the user is a Student
    function isStudent() {
      return request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Helper function to check if the user is a Parent
    // Placeholder: This needs more specific logic to link parent to child
    function isParent() {
      return request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }

    // Rules for the 'users' collection (stores user roles and basic info)
    match /users/{userId} {
      // ANY authenticated user can read their OWN user document.
      // Admins can read any user document.
      allow read: if request.auth.uid != null && (request.auth.uid == userId || isAdmin());

      // Admins can create user role documents
      // Users can update their own profile (but not their role)
      // Admins can update any user document (including roles)
      allow create: if isAdmin();
      allow update: if (request.auth.uid == userId && !('role' in request.resource.data)) || isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for 'students' collection
    match /students/{studentId} {
      allow read: if isAdmin() || isTeacher() || (isStudent() && request.auth.uid == studentId) || isParent(); // Parent rule needs refinement
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for 'teachers' collection
    match /teachers/{teacherId} {
      allow read: if isAdmin() || (isTeacher() && request.auth.uid == teacherId);
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'classes' collection
    match /classes/{classId} {
      allow read: if isAdmin() || isTeacher() || isStudent() || isParent(); 
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'subjects' collection
    match /subjects/{subjectId} {
      allow read: if isAdmin() || isTeacher();
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
      allow read: if request.auth.uid != null; 
      allow create, update, delete: if isAdmin();
    }

    // Rules for 'attendanceRecords' collection
    match /attendanceRecords/{recordId} {
      // Student can read their own attendance, Teacher can read for their classes (needs more specific check), Parent for their child
      allow read: if isAdmin() || isTeacher() || (isStudent() && get(/databases/$(database)/documents/attendanceRecords/$(recordId)).data.studentId == request.auth.uid) || isParent();
      allow create, update: if isAdmin() || isTeacher();
      allow delete: if isAdmin();
    }

    // Rules for 'gradeRecords' collection
    match /gradeRecords/{recordId} {
      // Student can read their own grades, Teacher can read/write for their classes (needs more specific check), Parent for their child
      allow read: if isAdmin() || isTeacher() || (isStudent() && get(/databases/$(database)/documents/gradeRecords/$(recordId)).data.studentId == request.auth.uid) || isParent();
      allow create, update: if isAdmin() || isTeacher();
      allow delete: if isAdmin();
    }
    
    // Rules for 'feeRecords' collection
    match /feeRecords/{feeId} {
      // Parent can read their child's fee records. This needs a reliable way to link parent to student(s).
      // Admin can read all.
      allow read: if isAdmin() || (isParent()); // Placeholder, needs better parent-child link logic
      allow create, update, delete: if isAdmin();
    }
  }
}

    